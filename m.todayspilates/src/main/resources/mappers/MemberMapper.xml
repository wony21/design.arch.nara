<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="m.todays.pilates.domain.member.MemberMapper">
    <select id="getMember" resultType="camelmap" statementType="PREPARED">
        SELECT *
        FROM MEMBER_M
        WHERE COMP_CD = #{compCd}
        	AND STOR_CD = #{storCd}
        <if test="memberNm != null and memberNm != ''">
        	AND MEMBER_NM LIKE '%' + #{memberNm} + '%'
        </if>
        <if test="memberNo != null and memberNo != ''">
        	AND MEMBER_NO = #{memberNo}
        </if>
    </select>
    <select id="getMemberList" parameterType="hashmap" resultType="camelmap" statementType="PREPARED">
	    SELECT A.COMP_CD, A.STOR_CD, A.MEMBER_NO, A.MEMBER_NM, A.HP, 
			B.STOR_NM, A.ENT_FG, C.NAME AS ENT_FG_NM,
			CASE WHEN A.SEX = 'F' THEN '여' ELSE '남' END SEX, A.REMARK, A.USE_YN
		FROM MEMBER_M A
		INNER JOIN STOR_M B
		ON A.COMP_CD = B.COMP_CD
		AND A.STOR_CD = B.STOR_CD
		INNER JOIN COMMON_CODE_M C
		ON C.GROUP_CD = '006'
		AND C.CODE = A.ENT_FG
		WHERE A.COMP_CD = #{compCd}
		<if test="storCd != null and storCd != ''">
			AND A.STOR_CD = #{storCd}
		</if>
		<if test="memberNm != null and memberNm != ''">
			AND A.MEMBER_NM LIKE '%' + #{memberNm} + '%'
		</if>
		AND A.USE_YN = 'Y'
		ORDER BY A.COMP_CD, A.STOR_CD, A.MEMBER_NO
    </select>
    <select id="getExistMember" parameterType="hashmap" resultType="camelmap" statementType="PREPARED">
	    SELECT *
		FROM MEMBER_M A
		WHERE A.COMP_CD = #{compCd}
		AND A.STOR_CD = #{storCd}
		AND replace(A.HP, '-', '') = replace(#{mobile}, '-', '')
    </select>
    <!-- 
    <insert id="addMemberM" parameterType="hashmap">
    INSERT INTO MEMBER_M (COMP_CD, STOR_CD, MEMBER_NO, MEMBER_NM, HP, SEX, ENT_DT, ENT_FG, REMARK, USE_YN, INS_USER, UPT_USER)
	VALUES (#{compCd}, #{storCd}, (SELECT REPLICATE('0', 5-LEN(MEMBER_NO))+MEMBER_NO MEMBER_NO
	  							FROM (
									SELECT 
										CONVERT(VARCHAR, ISNULL(MAX(CONVERT(INT, MEMBER_NO)), 0)+1) MEMBER_NO
									FROM MEMBER_M ) X),
			#{memberNm}, REPLACE(#{mobile}, '-', ''), #{sex}, CONVERT(VARCHAR, GETDATE(), 112), '1', #{remark}, 'Y', #{userCd}, #{userCd})
    </insert>
     -->
     <insert id="addMember" parameterType="hashmap" statementType="CALLABLE">
		{ call dbo.SP_ADD_MEMBER(
			#{compCd, mode=IN, jdbcType=VARCHAR, javaType=string},
			#{storCd, mode=IN, jdbcType=VARCHAR, javaType=string},
			#{memberNm, mode=IN, jdbcType=VARCHAR, javaType=string},
			#{mobile, mode=IN, jdbcType=VARCHAR, javaType=string},
			#{sex, mode=IN, jdbcType=VARCHAR, javaType=string},
			#{entFg, mode=IN, jdbcType=VARCHAR, javaType=string},
			#{entDt, mode=IN, jdbcType=VARCHAR, javaType=string},
			#{remark, mode=IN, jdbcType=VARCHAR, javaType=string},
			#{userCd, mode=IN, jdbcType=VARCHAR, javaType=string}
			)
		}
	</insert>
	<update id="updateMember" parameterType="hashmap" statementType="PREPARED">
		UPDATE MEMBER_M
		SET SEX = #{sex},
			ENT_FG = #{entFg},
			<if test="entDt != null and entDt != ''">
			ENT_DT = #{entDt},
			</if>
			REMARK = #{remark}
		WHERE COMP_CD = #{compCd}
			AND STOR_CD = #{storCd}
			AND MEMBER_NO = #{memberNo}
	</update>
	<delete id="deleteMember" parameterType="hashmap" statementType="PREPARED">
		UPDATE MEMBER_M
		SET USE_YN = 'N'
		WHERE COMP_CD = #{compCd}
			AND STOR_CD = #{storCd}
			AND MEMBER_NO = #{memberNo}
	</delete>
	<delete id="deleteUser" parameterType="hashmap" statementType="PREPARED">
		UPDATE USER_M
		SET USE_YN = 'N'
		WHERE COMP_CD = #{compCd}
			AND STOR_CD = #{storCd}
			AND USER_CD = REPLACE(#{mobile}, '-', '')
	</delete>
</mapper>